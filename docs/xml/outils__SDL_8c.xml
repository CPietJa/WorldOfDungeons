<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="outils__SDL_8c" kind="file" language="C++">
    <compoundname>outils_SDL.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="erreur_8h" local="no">erreur.h</includes>
    <includes local="no">SDL2/SDL.h</includes>
    <includes local="no">SDL2/SDL_image.h</includes>
    <includes local="no">SDL2/SDL_ttf.h</includes>
    <includes refid="outils__SDL_8h" local="no">outils_SDL.h</includes>
    <incdepgraph>
      <node id="592">
        <label>erreur.h</label>
        <link refid="erreur_8h"/>
      </node>
      <node id="594">
        <label>SDL2/SDL_image.h</label>
      </node>
      <node id="590">
        <label>stdlib.h</label>
      </node>
      <node id="596">
        <label>outils_SDL.h</label>
        <link refid="outils__SDL_8h"/>
        <childnode refid="593" relation="include">
        </childnode>
        <childnode refid="592" relation="include">
        </childnode>
      </node>
      <node id="593">
        <label>SDL2/SDL.h</label>
      </node>
      <node id="591">
        <label>string.h</label>
      </node>
      <node id="588">
        <label>src/outils_SDL.c</label>
        <link refid="outils__SDL_8c"/>
        <childnode refid="589" relation="include">
        </childnode>
        <childnode refid="590" relation="include">
        </childnode>
        <childnode refid="591" relation="include">
        </childnode>
        <childnode refid="592" relation="include">
        </childnode>
        <childnode refid="593" relation="include">
        </childnode>
        <childnode refid="594" relation="include">
        </childnode>
        <childnode refid="595" relation="include">
        </childnode>
        <childnode refid="596" relation="include">
        </childnode>
      </node>
      <node id="589">
        <label>stdio.h</label>
      </node>
      <node id="595">
        <label>SDL2/SDL_ttf.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="outils__SDL_8c_1a17717a1787c318f04c2b3050aad4c319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>t_erreur</type>
        <definition>t_erreur Create_IMG_Texture</definition>
        <argsstring>(SDL_Renderer *renderer, char *chemin_img, SDL_Texture **texture_dest)</argsstring>
        <name>Create_IMG_Texture</name>
        <param>
          <type>SDL_Renderer *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>chemin_img</declname>
        </param>
        <param>
          <type>SDL_Texture **</type>
          <declname>texture_dest</declname>
        </param>
        <briefdescription>
<para>Créé la texture correspondant à l&apos;image passé en paramètre. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chemin_img</parametername>
</parameternamelist>
<parameterdescription>
<para>chemin de l&apos;image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture_dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Texture de destination de l&apos;image </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Code erreur </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/outils_SDL.c" line="26" column="1" bodyfile="src/outils_SDL.c" bodystart="26" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="outils__SDL_8c_1a05fb01fd866f77718813d6fce20670c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>t_erreur</type>
        <definition>t_erreur Create_Text_Texture</definition>
        <argsstring>(SDL_Renderer *renderer, char *texte, char *chemin_police, int taille_police, SDL_Color couleur, t_type_dessin_texte type, SDL_Texture **texture_dest)</argsstring>
        <name>Create_Text_Texture</name>
        <param>
          <type>SDL_Renderer *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>texte</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>chemin_police</declname>
        </param>
        <param>
          <type>int</type>
          <declname>taille_police</declname>
        </param>
        <param>
          <type>SDL_Color</type>
          <declname>couleur</declname>
        </param>
        <param>
          <type>t_type_dessin_texte</type>
          <declname>type</declname>
        </param>
        <param>
          <type>SDL_Texture **</type>
          <declname>texture_dest</declname>
        </param>
        <briefdescription>
<para>Créé la texture correspondant au texte passé en paramètre. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texte</parametername>
</parameternamelist>
<parameterdescription>
<para>texte que l&apos;on veut afficher </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chemin_police</parametername>
</parameternamelist>
<parameterdescription>
<para>police de caractère du texte </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>taille_police</parametername>
</parameternamelist>
<parameterdescription>
<para>taille de la police </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>couleur</parametername>
</parameternamelist>
<parameterdescription>
<para>couleur du texte </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type d&apos;affichage du texte </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture_dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Texture de destination du texte </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Code erreur </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/outils_SDL.c" line="63" column="1" bodyfile="src/outils_SDL.c" bodystart="63" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contient une boite à outils de fonctions SDL. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Jasmin GALBRUN </para></simplesect>
<simplesect kind="date"><para>09/03/2019 </para></simplesect>
<simplesect kind="version"><para>1 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="erreur_8h" kindref="compound">erreur.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL2/SDL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL2/SDL_image.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL2/SDL_ttf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="outils__SDL_8h" kindref="compound">outils_SDL.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">t_erreur<sp/><ref refid="outils__SDL_8c_1a17717a1787c318f04c2b3050aad4c319" kindref="member">Create_IMG_Texture</ref>(SDL_Renderer<sp/>*<sp/>renderer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>chemin_img,<sp/>SDL_Texture<sp/>*<sp/>*texture_dest){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Vérification<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(renderer<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PTR_NULL;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(texture_dest<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PTR_NULL;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Création<sp/>Surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Surface<sp/>*<sp/>image<sp/>=<sp/>IMG_Load(chemin_img);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(image<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PTR_NULL;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>création<sp/>Texture<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>*texture_dest<sp/>=<sp/>SDL_CreateTextureFromSurface(renderer,<sp/>image);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_FreeSurface(image);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*texture_dest<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PTR_NULL;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OK;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">t_erreur<sp/><ref refid="outils__SDL_8c_1a05fb01fd866f77718813d6fce20670c1" kindref="member">Create_Text_Texture</ref>(SDL_Renderer<sp/>*<sp/>renderer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>texte,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>chemin_police,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>taille_police,<sp/>SDL_Color<sp/>couleur,<sp/>t_type_dessin_texte<sp/>type,<sp/>SDL_Texture<sp/>*<sp/>*texture_dest){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Vérification<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(renderer<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PTR_NULL;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(texture_dest<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PTR_NULL;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Création<sp/>police<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>TTF_Font<sp/>*police<sp/>=<sp/>TTF_OpenFont(chemin_police,<sp/>taille_police);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(police<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>TTF_GetError());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PTR_NULL;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Création<sp/>Surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Surface<sp/>*<sp/>texte_surface<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type<sp/>==<sp/>BLENDED){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texte_surface<sp/>=<sp/>TTF_RenderText_Blended(police,<sp/>texte,<sp/>couleur);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>SOLID){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texte_surface<sp/>=<sp/>TTF_RenderText_Solid(police,texte,couleur);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>SHADED){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texte_surface<sp/>=<sp/>TTF_RenderText_Shaded(police,texte,couleur,couleur);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TYPE_ERROR;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(texte_surface<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PTR_NULL;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Création<sp/>Texture<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>*texture_dest<sp/>=<sp/>SDL_CreateTextureFromSurface(renderer,<sp/>texte_surface);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*texture_dest<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PTR_NULL;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Destruction<sp/>pointeur<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_FreeSurface(texte_surface);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>TTF_CloseFont(police);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OK;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/outils_SDL.c"/>
  </compounddef>
</doxygen>
