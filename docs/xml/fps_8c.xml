<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="fps_8c" kind="file" language="C++">
    <compoundname>fps.c</compoundname>
    <includes refid="fps_8h" local="no">fps.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">SDL2/SDL.h</includes>
    <includes local="no">stdio.h</includes>
    <incdepgraph>
      <node id="344">
        <label>fps.h</label>
        <link refid="fps_8h_source"/>
      </node>
      <node id="343">
        <label>src/fps.c</label>
        <link refid="fps_8c"/>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="346" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
      </node>
      <node id="346">
        <label>SDL2/SDL.h</label>
      </node>
      <node id="345">
        <label>time.h</label>
      </node>
      <node id="347">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="fps_8c_1aee21f2cacf698390d1e403ea397ad318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fps_init</definition>
        <argsstring>()</argsstring>
        <name>fps_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fps.c" line="8" column="1" bodyfile="src/fps.c" bodystart="8" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="fps_8c_1a65238eab377bf23f23b2e17201fd03c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double fps</definition>
        <argsstring>()</argsstring>
        <name>fps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fps.c" line="14" column="1" bodyfile="src/fps.c" bodystart="14" bodyend="41"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;fps.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL2/SDL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fps_init<sp/>()<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>la<sp/>premiere<sp/>fois,<sp/>fps<sp/>retourne<sp/>une<sp/>valeur<sp/>aleatoire.<sp/>permet<sp/>d<sp/>eviter<sp/>cela*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>fps();</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fps<sp/>()<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>doit<sp/>Ãªtre<sp/>appeler<sp/>en<sp/>fin<sp/>de<sp/>boucle<sp/>lorsque<sp/>le<sp/>controle<sp/>du<sp/>temps<sp/>doit<sp/>etre<sp/>effectuer.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retourne<sp/>une<sp/>valeur<sp/>double<sp/>en<sp/>fonction<sp/>des<sp/>fps<sp/>effectifs<sp/>de<sp/>l<sp/>utilisateur.<sp/>(<sp/>moins<sp/>il<sp/>a<sp/>de<sp/>fps,<sp/>plus<sp/>cette<sp/>valeur<sp/>sera<sp/>elever<sp/>et<sp/>vice<sp/>versa<sp/>)<sp/>--&gt;<sp/>ex<sp/>pour<sp/>25<sp/>fps<sp/>cette<sp/>fonction<sp/>renveras<sp/>2<sp/>puisque<sp/>les<sp/>fps<sp/>de<sp/>base<sp/>sont<sp/>50*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tempsImage<sp/>=<sp/>(<sp/>1.0<sp/>/<sp/>FPS<sp/>)<sp/>*<sp/>1000.0;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>debutImage<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>temp;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>tdelay;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>tdelay.tv_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/>SDL_GetTicks()<sp/>-<sp/>debutImage<sp/>&lt;<sp/>tempsImage<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tdelay.tv_nsec<sp/>=<sp/>(<sp/>tempsImage<sp/>-<sp/>(<sp/>SDL_GetTicks()<sp/>-<sp/>debutImage<sp/>)<sp/>)<sp/>*<sp/>1000<sp/>-<sp/>1000<sp/>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//nanosleep(&amp;tdelay,<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Delay(tdelay.tv_nsec<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>SDL_GetTicks()<sp/>-<sp/>debutImage<sp/>&lt;<sp/>tempsImage<sp/>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>debutImage;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>debutImage<sp/>=<sp/>SDL_GetTicks();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FPS_BASE<sp/>/<sp/>(<sp/>(<sp/>1.0<sp/>/<sp/>(<sp/>SDL_GetTicks()<sp/>-<sp/>temp<sp/>)<sp/>)<sp/>*<sp/>1000<sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/fps.c"/>
  </compounddef>
</doxygen>
