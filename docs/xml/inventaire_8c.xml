<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="inventaire_8c" kind="file" language="C++">
    <compoundname>inventaire.c</compoundname>
    <includes refid="inventaire_8h" local="no">inventaire.h</includes>
    <includes refid="json_8h" local="no">json.h</includes>
    <includes refid="outils__SDL_8h" local="no">outils_SDL.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="498">
        <label>assert.h</label>
      </node>
      <node id="502">
        <label>erreur.h</label>
        <link refid="erreur_8h"/>
      </node>
      <node id="508">
        <label>json.h</label>
        <link refid="json_8h"/>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
      </node>
      <node id="504">
        <label>stdint.h</label>
      </node>
      <node id="507">
        <label>stdlib.h</label>
      </node>
      <node id="496">
        <label>inventaire.h</label>
        <link refid="inventaire_8h_source"/>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="498" relation="include">
        </childnode>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="506" relation="include">
        </childnode>
        <childnode refid="505" relation="include">
        </childnode>
      </node>
      <node id="500">
        <label>block.h</label>
        <link refid="block_8h"/>
        <childnode refid="501" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
      </node>
      <node id="506">
        <label>liste.h</label>
        <link refid="liste_8h"/>
        <childnode refid="502" relation="include">
        </childnode>
      </node>
      <node id="510">
        <label>outils_SDL.h</label>
        <link refid="outils__SDL_8h"/>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
      </node>
      <node id="501">
        <label>couleurs.h</label>
        <link refid="couleurs_8h_source"/>
      </node>
      <node id="497">
        <label>SDL2/SDL.h</label>
      </node>
      <node id="511">
        <label>string.h</label>
      </node>
      <node id="499">
        <label>item.h</label>
        <link refid="item_8h_source"/>
        <childnode refid="500" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="505" relation="include">
        </childnode>
      </node>
      <node id="503">
        <label>time.h</label>
      </node>
      <node id="505">
        <label>chemin.h</label>
        <link refid="chemin_8h"/>
        <childnode refid="506" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
      </node>
      <node id="495">
        <label>src/inventaire.c</label>
        <link refid="inventaire_8c"/>
        <childnode refid="496" relation="include">
        </childnode>
        <childnode refid="508" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
      </node>
      <node id="509">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="inventaire_8c_1a0f7d99ed7b06638b0949ea8ff0c90aa0" prot="public" static="no">
        <name>DEFAULT_SIZE_IMG_W</name>
        <initializer>150</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="8" column="9" bodyfile="src/inventaire.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inventaire_8c_1ac199785f3a352065c1aa853a87ebd04d" prot="public" static="no">
        <name>DEFAULT_SIZE_IMG_H</name>
        <initializer>150</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="9" column="9" bodyfile="src/inventaire.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inventaire_8c_1a071723e65697760a3912e7eb5cbc1133" prot="public" static="no">
        <name>CHEMIN_POLICE</name>
        <initializer>&quot;data/police/pixel.ttf&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="11" column="9" bodyfile="src/inventaire.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="inventaire_8c_1abfb3a20ee46ac186ed509765659d0de5" prot="public" static="no" mutable="no">
        <type>SDL_Color</type>
        <definition>SDL_Color couleurNombre</definition>
        <argsstring></argsstring>
        <name>couleurNombre</name>
        <initializer>= {255, 255, 255}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="13" column="1" bodyfile="src/inventaire.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1af7d2c6796f8e6b75c81135dd99bb39ac" prot="public" static="no" mutable="no">
        <type>SDL_Color</type>
        <definition>SDL_Color couleurTexte</definition>
        <argsstring></argsstring>
        <name>couleurTexte</name>
        <initializer>= {255, 0, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="14" column="1" bodyfile="src/inventaire.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a3e80c1fcc63e16c33fe2eb36e77fbdda" prot="public" static="no" mutable="no">
        <type>SDL_Texture *</type>
        <definition>SDL_Texture* bordure</definition>
        <argsstring></argsstring>
        <name>bordure</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="16" column="1" bodyfile="src/inventaire.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a3764ffc5682854605fbdad0eb772a3cd" prot="public" static="no" mutable="no">
        <type>SDL_Texture *</type>
        <definition>SDL_Texture* bordureSelectionne</definition>
        <argsstring></argsstring>
        <name>bordureSelectionne</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="17" column="1" bodyfile="src/inventaire.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a9d5e2f188fe0bd385bfd30a544e8dd40" prot="public" static="no" mutable="no">
        <type>SDL_Texture *</type>
        <definition>SDL_Texture* fondItem</definition>
        <argsstring></argsstring>
        <name>fondItem</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="18" column="1" bodyfile="src/inventaire.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1ab647433f0c674148f6da872933642a4a" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t nbinventairebarre</definition>
        <argsstring></argsstring>
        <name>nbinventairebarre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="20" column="1" bodyfile="src/inventaire.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1aabdc6cc69bf347e142fcb67e09f14a0e" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t rectX</definition>
        <argsstring></argsstring>
        <name>rectX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="21" column="1" bodyfile="src/inventaire.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a59de9287626a0fa086d81559fee8c07d" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t rectTexteX</definition>
        <argsstring></argsstring>
        <name>rectTexteX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="22" column="1" bodyfile="src/inventaire.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a20de1ed267ac738de68e969a7eff8cff" prot="public" static="no" mutable="no">
        <type>SDL_Rect</type>
        <definition>SDL_Rect barreRect</definition>
        <argsstring></argsstring>
        <name>barreRect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="23" column="1" bodyfile="src/inventaire.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a90501081ff1c67eac5d55759c99c8f63" prot="public" static="no" mutable="no">
        <type>SDL_Rect</type>
        <definition>SDL_Rect barreRectTexteNombre</definition>
        <argsstring></argsstring>
        <name>barreRectTexteNombre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="24" column="1" bodyfile="src/inventaire.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1ab5319bcadc471ce5eeb7ef08dfcbf75c" prot="public" static="no" mutable="no">
        <type>SDL_Rect</type>
        <definition>SDL_Rect barreRectTexteItem</definition>
        <argsstring></argsstring>
        <name>barreRectTexteItem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="25" column="1" bodyfile="src/inventaire.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a3132732832eebc5eecaeb43a7910b7da" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t maxLigne</definition>
        <argsstring></argsstring>
        <name>maxLigne</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="27" column="1" bodyfile="src/inventaire.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a69f678292fe341f8538edd9369a53e18" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t rectInventaireX1</definition>
        <argsstring></argsstring>
        <name>rectInventaireX1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="28" column="1" bodyfile="src/inventaire.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a2d0f4bff59e3c53c86c438a6970f5d7c" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t rectInventaireY1</definition>
        <argsstring></argsstring>
        <name>rectInventaireY1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="29" column="1" bodyfile="src/inventaire.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a36d2dc4291af292379cd54e11113d9cc" prot="public" static="no" mutable="no">
        <type>SDL_Rect</type>
        <definition>SDL_Rect rectInventaire1</definition>
        <argsstring></argsstring>
        <name>rectInventaire1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="30" column="1" bodyfile="src/inventaire.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1a777ae35e4a21ae22c0137f225e1a5105" prot="public" static="no" mutable="no">
        <type>int8_t</type>
        <definition>int8_t selection</definition>
        <argsstring></argsstring>
        <name>selection</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="32" column="1" bodyfile="src/inventaire.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inventaire_8c_1aa3f4667d08a55581ea99ec9080816e23" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* police</definition>
        <argsstring></argsstring>
        <name>police</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="34" column="1" bodyfile="src/inventaire.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="inventaire_8c_1a6cfa86b2594a44ee3f6c42aaa87fa4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inventaire_init</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>inventaire_init</name>
        <param>
          <type>SDL_Renderer *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="36" column="1" bodyfile="src/inventaire.c" bodystart="36" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1a5e2076e6e71750d35165a2b0be20fe07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref> *</type>
        <definition>t_inventaire* create_inventaire</definition>
        <argsstring>()</argsstring>
        <name>create_inventaire</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="59" column="1" bodyfile="src/inventaire.c" bodystart="59" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1a2cfed12bf7030875e6cc3c3ebc885f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alloc_item</definition>
        <argsstring>(t_inventaire *inventaire, const uint16_t nbItem)</argsstring>
        <name>alloc_item</name>
        <param>
          <type><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref> *</type>
          <declname>inventaire</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>nbItem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="72" column="1" bodyfile="src/inventaire.c" bodystart="72" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1aff3b29fde46c30dd8ad24883c74e1530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ajout_item_dans_inventaire</definition>
        <argsstring>(t_inventaire *inventaire, t_liste *listeItem)</argsstring>
        <name>ajout_item_dans_inventaire</name>
        <param>
          <type><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref> *</type>
          <declname>inventaire</declname>
        </param>
        <param>
          <type><ref refid="structt__liste" kindref="compound">t_liste</ref> *</type>
          <declname>listeItem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="105" column="1" bodyfile="src/inventaire.c" bodystart="105" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1a980a6839b9acb117b6a92dc9897a07db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void afficher_inventaire</definition>
        <argsstring>(t_inventaire *inventaire)</argsstring>
        <name>afficher_inventaire</name>
        <param>
          <type><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref> *</type>
          <declname>inventaire</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="163" column="1" bodyfile="src/inventaire.c" bodystart="163" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1a88d1049025034668b998aad50b8a8b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inventaire_changer_constante</definition>
        <argsstring>(const uint8_t nbinventaire)</argsstring>
        <name>inventaire_changer_constante</name>
        <param>
          <type>const uint8_t</type>
          <declname>nbinventaire</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="177" column="1" bodyfile="src/inventaire.c" bodystart="177" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1af1116b05ccc7079a9e4f28bd233307af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="block_8h_1a4030ebe0eea609635f372f2e86d4332a" kindref="member">t_materiaux</ref></type>
        <definition>t_materiaux poser_block</definition>
        <argsstring>(t_inventaire *inventaire)</argsstring>
        <name>poser_block</name>
        <param>
          <type><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref> *</type>
          <declname>inventaire</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="198" column="1" bodyfile="src/inventaire.c" bodystart="198" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1a47c6ffb6eff81615b05455d9c0d24297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SDL_afficher_barre_action</definition>
        <argsstring>(SDL_Renderer *renderer, t_inventaire *inventaire, const int8_t scroll)</argsstring>
        <name>SDL_afficher_barre_action</name>
        <param>
          <type>SDL_Renderer *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref> *</type>
          <declname>inventaire</declname>
        </param>
        <param>
          <type>const int8_t</type>
          <declname>scroll</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="213" column="1" bodyfile="src/inventaire.c" bodystart="213" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1a5a5dc6b0cf93a45f4bb777d855baffbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inventaire_afficher</definition>
        <argsstring>(SDL_Renderer *renderer, t_inventaire *inventaire)</argsstring>
        <name>inventaire_afficher</name>
        <param>
          <type>SDL_Renderer *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref> *</type>
          <declname>inventaire</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="277" column="1" bodyfile="src/inventaire.c" bodystart="277" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1ad59c3f674c9512358e4ea00cf1657624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inventaire_enregistrer</definition>
        <argsstring>(const char *path, t_enr_inventaire *enr_inventaire)</argsstring>
        <name>inventaire_enregistrer</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structenr__inventaire__s" kindref="compound">t_enr_inventaire</ref> *</type>
          <declname>enr_inventaire</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="322" column="1" bodyfile="src/inventaire.c" bodystart="322" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1aab40829ce39045538cd9ccbf1eacf5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inventaire_recuperer</definition>
        <argsstring>(const char *path, t_inventaire **inventaire, const int64_t x, const int32_t y)</argsstring>
        <name>inventaire_recuperer</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref> **</type>
          <declname>inventaire</declname>
        </param>
        <param>
          <type>const int64_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="352" column="1" bodyfile="src/inventaire.c" bodystart="352" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="inventaire_8c_1a9b9d4d89e88380285b66e26f468fa8f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_inventaire</definition>
        <argsstring>(t_inventaire *inventaire)</argsstring>
        <name>free_inventaire</name>
        <param>
          <type><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref> *</type>
          <declname>inventaire</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inventaire.c" line="405" column="1" bodyfile="src/inventaire.c" bodystart="405" bodyend="429"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;inventaire.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="json_8h" kindref="compound">json.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="outils__SDL_8h" kindref="compound">outils_SDL.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_SIZE_IMG_W<sp/>150</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_SIZE_IMG_H<sp/>150</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHEMIN_POLICE<sp/>&quot;data/police/pixel.ttf&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">SDL_Color<sp/>couleurNombre<sp/>=<sp/>{255,<sp/>255,<sp/>255};</highlight></codeline>
<codeline lineno="14"><highlight class="normal">SDL_Color<sp/>couleurTexte<sp/>=<sp/>{255,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">SDL_Texture<sp/>*bordure<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">SDL_Texture<sp/>*bordureSelectionne<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">SDL_Texture<sp/>*fondItem<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">uint8_t<sp/>nbinventairebarre;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">uint16_t<sp/>rectX;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">uint16_t<sp/>rectTexteX;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">SDL_Rect<sp/>barreRect;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">SDL_Rect<sp/>barreRectTexteNombre;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">SDL_Rect<sp/>barreRectTexteItem;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">uint8_t<sp/>maxLigne;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">uint16_t<sp/>rectInventaireX1;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">uint16_t<sp/>rectInventaireY1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">SDL_Rect<sp/>rectInventaire1;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">int8_t<sp/>selection<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*police<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inventaire_init(<sp/>SDL_Renderer<sp/>*renderer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(renderer<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*chemin;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="chemin_8c_1a426a590237f668eca1627c0cc3985cd2" kindref="member">creation_chemin</ref>(</highlight><highlight class="stringliteral">&quot;data/Image/Bordure_150_150.bmp&quot;</highlight><highlight class="normal">,<sp/>&amp;chemin);<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="outils__SDL_8c_1a17717a1787c318f04c2b3050aad4c319" kindref="member">Create_IMG_Texture</ref>(renderer,<sp/>chemin,<sp/>&amp;bordure);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>free(chemin);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="chemin_8c_1a426a590237f668eca1627c0cc3985cd2" kindref="member">creation_chemin</ref>(</highlight><highlight class="stringliteral">&quot;data/Image/selecteur_inventaire.png&quot;</highlight><highlight class="normal">,<sp/>&amp;chemin);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="outils__SDL_8c_1a17717a1787c318f04c2b3050aad4c319" kindref="member">Create_IMG_Texture</ref>(renderer,<sp/>chemin,<sp/>&amp;bordureSelectionne);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>free(chemin);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="chemin_8c_1a426a590237f668eca1627c0cc3985cd2" kindref="member">creation_chemin</ref>(</highlight><highlight class="stringliteral">&quot;data/Image/Fond_item_150_150.png&quot;</highlight><highlight class="normal">,<sp/>&amp;chemin);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="outils__SDL_8c_1a17717a1787c318f04c2b3050aad4c319" kindref="member">Create_IMG_Texture</ref>(renderer,<sp/>chemin,<sp/>&amp;fondItem);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>free(chemin);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="chemin_8c_1a426a590237f668eca1627c0cc3985cd2" kindref="member">creation_chemin</ref>(CHEMIN_POLICE,<sp/>&amp;police);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref><sp/>*create_inventaire()<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref><sp/>*inventaire<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structinventaire__s" kindref="compound">t_inventaire</ref>));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>inventaire<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>inventaire-&gt;inventaire<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inventaire;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alloc_item(<ref refid="structinventaire__s" kindref="compound">t_inventaire</ref><sp/>*inventaire,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>nbItem<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inventaire-&gt;inventaire<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inventaire-&gt;inventaire<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structinventaire__item__s" kindref="compound">t_inventaire_item</ref>)<sp/>*<sp/>nbItem);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inventaire-&gt;nbItemMax<sp/>=<sp/>nbItem;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inventaire-&gt;nbItem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>uint16_t<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>nbItem<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(inventaire-&gt;inventaire)<sp/>+<sp/>i<sp/>)-&gt;item<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(inventaire-&gt;inventaire)<sp/>+<sp/>i<sp/>)-&gt;stack<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inventaire-&gt;inventaire<sp/>=<sp/>realloc(inventaire-&gt;inventaire,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structinventaire__item__s" kindref="compound">t_inventaire_item</ref>)<sp/>*<sp/>nbItem);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>uint16_t<sp/>i<sp/>=<sp/>inventaire-&gt;nbItemMax<sp/>;<sp/>i<sp/>&lt;<sp/>nbItem<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(inventaire-&gt;inventaire)<sp/>+<sp/>i<sp/>)-&gt;item<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(inventaire-&gt;inventaire)<sp/>+<sp/>i<sp/>)-&gt;stack<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inventaire-&gt;nbItemMax<sp/>=<sp/>nbItem;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(<sp/>inventaire-&gt;inventaire<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ajout_item_dans_inventaire(<sp/><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref><sp/>*inventaire,<sp/><ref refid="structt__liste" kindref="compound">t_liste</ref><sp/>*listeItem<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="liste_8c_1a9a2af94927570339b5708b99c4831cf3" kindref="member">en_tete</ref>(<sp/>listeItem<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>placeLibre,<sp/>i;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structliste__item__s" kindref="compound">t_liste_item</ref><sp/>*ptritem;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>listeItem<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>inventaire<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pour<sp/>tous<sp/>les<sp/>éléments<sp/>de<sp/>la<sp/>liste<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="liste_8c_1aa42eefd0ac04de255ffb11f5e9fdabd6" kindref="member">hors_liste</ref>(<sp/>listeItem<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liste_8c_1a4eaf58887e3dd578a2699aefc5963fe4" kindref="member">valeur_elt</ref>(<sp/>listeItem,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;ptritem<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeLibre<sp/>=<sp/>inventaire-&gt;nbItemMax;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>recherche<sp/>d&apos;une<sp/>place<sp/>d&apos;inventaire<sp/>deja<sp/>occupé<sp/>par<sp/>l&apos;item<sp/>que<sp/>l&apos;on<sp/>souhaite<sp/>mettre<sp/>&amp;&amp;<sp/>que<sp/>cette<sp/>case<sp/>ne<sp/>soit<sp/>pas<sp/>rempli<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>inventaire-&gt;nbItemMax<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(((<sp/>inventaire-&gt;inventaire)<sp/>+<sp/>i)-&gt;item)<sp/>==<sp/>(tabItem<sp/>+<sp/>(<sp/>ptritem-&gt;item<sp/>))<sp/>&amp;&amp;<sp/>((<sp/>inventaire-&gt;inventaire)<sp/>+<sp/>i)-&gt;stack<sp/>&lt;<sp/>(tabItem<sp/>+<sp/>(<sp/>ptritem-&gt;item<sp/>))-&gt;stack<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeLibre<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>inventaire-&gt;nbItemMax;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>si<sp/>aucune<sp/>place<sp/>trouvé<sp/>alors<sp/>recherche<sp/>d&apos;un<sp/>case<sp/>d&apos;inventaire<sp/>libre<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>placeLibre<sp/>&gt;=<sp/>inventaire-&gt;nbItemMax<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeLibre<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>placeLibre<sp/>&lt;<sp/>inventaire-&gt;nbItemMax<sp/>&amp;&amp;<sp/>((inventaire-&gt;inventaire)<sp/>+<sp/>placeLibre)-&gt;item<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeLibre++;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>si<sp/>une<sp/>place<sp/>a<sp/>été<sp/>trouvé<sp/>alors<sp/>ajout<sp/>de<sp/>l&apos;item<sp/>dans<sp/>l&apos;inventaire<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>placeLibre<sp/>&lt;<sp/>inventaire-&gt;nbItemMax<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(inventaire-&gt;inventaire)<sp/>+<sp/>placeLibre<sp/>)-&gt;item<sp/>=<sp/>(tabItem<sp/>+<sp/>(<sp/>ptritem-&gt;item<sp/>));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>((inventaire-&gt;inventaire)<sp/>+<sp/>placeLibre)-&gt;stack<sp/>+<sp/>ptritem-&gt;nbDrop<sp/>&gt;<sp/>(tabItem<sp/>+<sp/>(<sp/>ptritem-&gt;item<sp/>))-&gt;stack<sp/>){</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptritem-&gt;nbDrop<sp/>-=<sp/>(tabItem<sp/>+<sp/>(<sp/>ptritem-&gt;item<sp/>))-&gt;stack<sp/>-<sp/>((inventaire-&gt;inventaire)<sp/>+<sp/>placeLibre)-&gt;stack;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(inventaire-&gt;inventaire)<sp/>+<sp/>placeLibre<sp/>)-&gt;stack<sp/>=<sp/>(tabItem<sp/>+<sp/>(<sp/>ptritem-&gt;item<sp/>))-&gt;stack;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(inventaire-&gt;inventaire)<sp/>+<sp/>placeLibre<sp/>)-&gt;stack<sp/>+=<sp/>ptritem-&gt;nbDrop;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liste_8c_1ad613f3378b165515b6f7a4cbe45265a0" kindref="member">oter_elt</ref>(listeItem,<sp/>free);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liste_8c_1a9a2af94927570339b5708b99c4831cf3" kindref="member">en_tete</ref>(listeItem);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liste_8c_1ac95aadbae271f7e76ca486b6187dd8dd" kindref="member">suivant</ref>(listeItem);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>afficher_inventaire<sp/>(<sp/><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref><sp/>*inventaire<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>i;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nbItems<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>inventaire-&gt;nbItemMax<sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>inventaire-&gt;nbItemMax<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;slot<sp/>%d<sp/>:<sp/>%p<sp/><sp/><sp/><sp/>nb<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>(inventaire-&gt;inventaire<sp/>+<sp/>i)-&gt;item,<sp/>(inventaire-&gt;inventaire<sp/>+<sp/>i)-&gt;stack<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Fin<sp/>de<sp/>l&apos;affichage\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inventaire_changer_constante<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>nbinventaire<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>nbinventairebarre<sp/>=<sp/>nbinventaire;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>barreRect.w<sp/>=<sp/>((DEFAULT_SIZE_IMG_W<sp/>/<sp/>2.0)<sp/>*<sp/>(<sp/>uiScale<sp/>/<sp/>100.0<sp/>))<sp/>/<sp/>scaleW;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>barreRect.h<sp/>=<sp/>((DEFAULT_SIZE_IMG_H<sp/>/<sp/>2.0)<sp/>*<sp/>(<sp/>uiScale<sp/>/<sp/>100.0<sp/>))<sp/>/<sp/>scaleH;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>rectX<sp/>=<sp/>WIDTH<sp/>/<sp/>2<sp/>-<sp/>(<sp/>(<sp/>barreRect.w<sp/><sp/>/<sp/>2.0<sp/>)<sp/>*<sp/>nbinventairebarre<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>barreRect.y<sp/>=<sp/></highlight><highlight class="comment">/*HEIGHT<sp/>-<sp/>30<sp/>-<sp/>barreRect.h*/</highlight><highlight class="normal"><sp/>30;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>barreRectTexteNombre.w<sp/>=<sp/>barreRect.w<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>barreRectTexteNombre.h<sp/>=<sp/>barreRect.h<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>rectTexteX<sp/>=<sp/>rectX<sp/>+<sp/>barreRect.w<sp/>-<sp/>barreRectTexteNombre.w<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>barreRectTexteNombre.y<sp/>=<sp/>barreRect.y<sp/>+<sp/>barreRect.h<sp/>-<sp/>barreRectTexteNombre.h<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>rectInventaire1.w<sp/>=<sp/>((DEFAULT_SIZE_IMG_W<sp/>*<sp/>0.6<sp/>)<sp/>*<sp/>(<sp/>uiScale<sp/>/<sp/>100<sp/>))<sp/>/<sp/>scaleW;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>rectInventaire1.h<sp/>=<sp/>((DEFAULT_SIZE_IMG_H<sp/>*<sp/>0.6<sp/>)<sp/>*<sp/>(<sp/>uiScale<sp/>/<sp/>100<sp/>))<sp/>/<sp/>scaleH;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>rectInventaireX1<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>rectInventaireY1<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>maxLigne<sp/>=<sp/>(<sp/>WIDTH<sp/>*<sp/>0.4<sp/>-<sp/>30<sp/>)<sp/>/<sp/>rectInventaire1.w;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="block_8h_1a4030ebe0eea609635f372f2e86d4332a" kindref="member">t_materiaux</ref><sp/>poser_block<sp/>(<sp/><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref><sp/>*inventaire<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>inventaire-&gt;inventaire<sp/>+<sp/>selection<sp/>)-&gt;item<sp/>==<sp/>NULL<sp/>||<sp/>(<sp/>inventaire-&gt;inventaire<sp/>+<sp/>selection<sp/>)-&gt;item-&gt;posable<sp/>==<sp/>AIR<sp/>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AIR;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>inventaire-&gt;inventaire<sp/>+<sp/>selection<sp/>)-&gt;stack<sp/>--;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="block_8h_1a4030ebe0eea609635f372f2e86d4332a" kindref="member">t_materiaux</ref><sp/>mat<sp/>=<sp/>(<sp/>inventaire-&gt;inventaire<sp/>+<sp/>selection)-&gt;item-&gt;posable;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(<sp/>(inventaire-&gt;inventaire<sp/>+<sp/>selection<sp/>)-&gt;stack<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(inventaire-&gt;inventaire<sp/>+<sp/>selection)-&gt;item<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SDL_afficher_barre_action<sp/>(<sp/>SDL_Renderer<sp/>*renderer,<sp/><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref><sp/>*inventaire,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t<sp/>scroll<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>renderer<sp/>!=<sp/>NULL<sp/><sp/>&amp;&amp;<sp/>inventaire<sp/>!=<sp/>NULL<sp/><sp/>&amp;&amp;<sp/>uiScale<sp/>&gt;=<sp/>50<sp/>&amp;&amp;<sp/>uiScale<sp/>&lt;=<sp/>150<sp/>&amp;&amp;<sp/>bordure<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>bordureSelectionne<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>changement<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Texture<sp/>*textureNombre<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>texte[20];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scroll<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changement<sp/>=<sp/>50;<sp/></highlight><highlight class="comment">/*<sp/>nombre<sp/>de<sp/>frame<sp/>pendant<sp/>lequel<sp/>le<sp/>nom<sp/>de<sp/>l&apos;item<sp/>dera<sp/>affiché<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>couleurTexte.a<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection<sp/>+=<sp/>scroll;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>selection<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection<sp/>=<sp/>nbinventairebarre<sp/>-<sp/>((-selection)<sp/>%<sp/>(nbinventairebarre<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>selection<sp/>&gt;=<sp/>nbinventairebarre<sp/>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection<sp/>=<sp/>selection<sp/>%<sp/>nbinventairebarre;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>barreRect.x<sp/>=<sp/>rectX;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>barreRectTexteNombre.x<sp/>=<sp/>rectTexteX;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>changement<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(inventaire-&gt;inventaire<sp/>+<sp/>selection)-&gt;item<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>nbLettres<sp/>=<sp/>strlen(<sp/>(<sp/>inventaire-&gt;inventaire<sp/>+<sp/>selection<sp/>)-&gt;item-&gt;nomItem<sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barreRectTexteItem.y<sp/>=<sp/>barreRect.h<sp/>+<sp/>barreRect.y<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barreRectTexteItem.h<sp/>=<sp/>barreRect.h<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barreRectTexteItem.x<sp/>=<sp/>WIDTH<sp/>/<sp/>2<sp/>-<sp/>nbLettres<sp/>/<sp/>1.5<sp/>*<sp/>barreRectTexteItem.h<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barreRectTexteItem.w<sp/>=<sp/>nbLettres<sp/>/<sp/>1.5<sp/>*<sp/>barreRectTexteItem.h;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="outils__SDL_8c_1a05fb01fd866f77718813d6fce20670c1" kindref="member">Create_Text_Texture</ref>(renderer,<sp/>(<sp/>inventaire-&gt;inventaire<sp/>+<sp/>selection<sp/>)-&gt;item-&gt;nomItem,<sp/>police,<sp/>15,<sp/>couleurTexte,<sp/>BLENDED,<sp/>&amp;textureNombre<sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_SetTextureAlphaMod(<sp/>textureNombre,<sp/>couleurTexte.a);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_RenderCopy(<sp/>renderer,<sp/>textureNombre,<sp/>NULL,<sp/>&amp;barreRectTexteItem);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_DestroyTexture(textureNombre);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changement<sp/>--;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>changement<sp/>&lt;<sp/>25<sp/>)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>couleurTexte.a<sp/>=<sp/>changement<sp/>*<sp/>255<sp/>/<sp/>25;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>uint8_t<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>nbinventairebarre<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>inventaire-&gt;inventaire<sp/>+<sp/>i)-&gt;item<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>texte,</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,(inventaire-&gt;inventaire<sp/>+<sp/>i)-&gt;stack);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_RenderCopy(<sp/>renderer,<sp/>(<sp/>inventaire-&gt;inventaire<sp/>+<sp/>i)-&gt;item-&gt;texture,<sp/>NULL,<sp/>&amp;barreRect<sp/>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="outils__SDL_8c_1a05fb01fd866f77718813d6fce20670c1" kindref="member">Create_Text_Texture</ref>(renderer,<sp/>texte,<sp/>police,<sp/>50,<sp/>couleurNombre,<sp/>BLENDED,<sp/>&amp;textureNombre<sp/>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_RenderCopy(<sp/>renderer,<sp/>textureNombre,<sp/>NULL,<sp/>&amp;barreRectTexteNombre);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_DestroyTexture(textureNombre);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_RenderCopy(<sp/>renderer,<sp/>bordure,<sp/>NULL,<sp/>&amp;barreRect);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>selection<sp/>)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_RenderCopy(<sp/>renderer,<sp/>bordureSelectionne,<sp/>NULL,<sp/>&amp;barreRect);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barreRect.x<sp/>+=<sp/>barreRect.w;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barreRectTexteNombre.x<sp/>+=<sp/>barreRect.w;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inventaire_afficher<sp/>(<sp/>SDL_Renderer<sp/>*renderer,<sp/><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref><sp/>*inventaire<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>renderer<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>inventaire<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>texte[20];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Texture<sp/>*textureNombre<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Rect<sp/>rectNombre;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>rectNombre.w<sp/>=<sp/>rectInventaire1.w<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>rectNombre.h<sp/>=<sp/>rectInventaire1.h<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>rectInventaire1.x<sp/>=<sp/>rectInventaireX1;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>rectInventaire1.y<sp/>=<sp/>rectInventaireY1;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>curs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>j;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>curs<sp/>&lt;<sp/>inventaire-&gt;nbItemMax<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>maxLigne<sp/>&amp;&amp;<sp/>curs<sp/>&lt;<sp/>inventaire-&gt;nbItemMax<sp/>;<sp/>j++,<sp/>curs++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_RenderCopy(renderer,<sp/>fondItem,<sp/>NULL,<sp/>&amp;rectInventaire1);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>inventaire-&gt;inventaire<sp/>+<sp/>curs<sp/>)-&gt;item<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectNombre.x<sp/>=<sp/>rectInventaire1.x<sp/>+<sp/>rectInventaire1.w<sp/>-<sp/>rectNombre.w<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectNombre.y<sp/>=<sp/>rectInventaire1.y<sp/>+<sp/>rectInventaire1.h<sp/>-<sp/>rectNombre.h<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>texte,</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,(inventaire-&gt;inventaire<sp/>+<sp/>curs)-&gt;stack);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_RenderCopy(renderer,<sp/>(<sp/>inventaire-&gt;inventaire<sp/>+<sp/>curs)-&gt;item-&gt;texture,<sp/>NULL,<sp/>&amp;rectInventaire1);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="outils__SDL_8c_1a05fb01fd866f77718813d6fce20670c1" kindref="member">Create_Text_Texture</ref>(renderer,<sp/>texte,<sp/>police,<sp/>50,<sp/>couleurNombre,<sp/>BLENDED,<sp/>&amp;textureNombre<sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_RenderCopy(<sp/>renderer,<sp/>textureNombre,<sp/>NULL,<sp/>&amp;rectNombre);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectInventaire1.x<sp/>+=<sp/>rectInventaire1.w;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectInventaire1.y<sp/>+=<sp/>rectInventaire1.h;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectInventaire1.x<sp/>=<sp/>rectInventaireX1;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_DestroyTexture(textureNombre);</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inventaire_enregistrer<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/><ref refid="structenr__inventaire__s" kindref="compound">t_enr_inventaire</ref><sp/>*enr_inventaire<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*enr<sp/>=<sp/><ref refid="json_8c_1a89182dce713943cf48b018049b64b588" kindref="member">open_json</ref>(<sp/>path,<sp/></highlight><highlight class="stringliteral">&quot;inventaire&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nil<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[7];</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="json_8c_1a6dd5ea7284f649e178e13e99c43600b3" kindref="member">open_json_obj</ref>(enr);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="json_8c_1aef1b0866438f726985d55d84571526c8" kindref="member">write_json</ref>(enr,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>&amp;(enr_inventaire-&gt;x),<sp/></highlight><highlight class="stringliteral">&quot;d64&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="json_8c_1aef1b0866438f726985d55d84571526c8" kindref="member">write_json</ref>(enr,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>&amp;(enr_inventaire-&gt;y),<sp/></highlight><highlight class="stringliteral">&quot;d32&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="json_8c_1aef1b0866438f726985d55d84571526c8" kindref="member">write_json</ref>(enr,<sp/></highlight><highlight class="stringliteral">&quot;nbItems&quot;</highlight><highlight class="normal">,<sp/>&amp;(enr_inventaire-&gt;inventaire-&gt;nbItemMax),<sp/></highlight><highlight class="stringliteral">&quot;u16&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>uint16_t<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>enr_inventaire-&gt;inventaire-&gt;nbItemMax<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(enr_inventaire-&gt;inventaire-&gt;inventaire<sp/>+<sp/>i<sp/>)-&gt;item<sp/>!=<sp/>NULL<sp/>){</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="json_8c_1aef1b0866438f726985d55d84571526c8" kindref="member">write_json</ref>(enr,<sp/>buffer,<sp/>&amp;((enr_inventaire-&gt;inventaire-&gt;inventaire<sp/>+<sp/>i<sp/>)-&gt;item-&gt;id),<sp/></highlight><highlight class="stringliteral">&quot;u16&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="json_8c_1aef1b0866438f726985d55d84571526c8" kindref="member">write_json</ref>(enr,<sp/>strcat(buffer,<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">),<sp/>&amp;((enr_inventaire-&gt;inventaire-&gt;inventaire<sp/>+<sp/>i)-&gt;stack),<sp/></highlight><highlight class="stringliteral">&quot;u16&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="json_8c_1aef1b0866438f726985d55d84571526c8" kindref="member">write_json</ref>(enr,<sp/>buffer,<sp/>&amp;nil,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="json_8c_1a8d716a14bfd29aec5bef23e246be5275" kindref="member">close_json_obj</ref>(enr);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(enr);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inventaire_recuperer<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref><sp/>**inventaire,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>y<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*enr<sp/>=<sp/><ref refid="json_8c_1a89182dce713943cf48b018049b64b588" kindref="member">open_json</ref>(<sp/>path,<sp/></highlight><highlight class="stringliteral">&quot;inventaire&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*obj,<sp/>buffer[7];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>*val;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>*val2;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>nbItems;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="json_8c_1acd75e719d37a9c3f57167eeadfede913" kindref="member">fstart</ref>(enr);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="json_8c_1a10b95a250726186ac4ddfdda6adad3e3" kindref="member">extract_json_obj</ref>(<sp/>enr,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,obj);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_json_obj(<sp/>obj,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>val,<sp/></highlight><highlight class="stringliteral">&quot;d64&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_json_obj(<sp/>obj,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>val2,<sp/></highlight><highlight class="stringliteral">&quot;d32&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*val<sp/>!=<sp/>x<sp/>&amp;&amp;<sp/>*val2<sp/>!=<sp/>y<sp/>)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(obj);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>*val<sp/>!=<sp/>x<sp/>&amp;&amp;<sp/>*val2<sp/>!=<sp/>y<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>read_json_obj(<sp/>obj,<sp/></highlight><highlight class="stringliteral">&quot;nbItems&quot;</highlight><highlight class="normal">,<sp/>&amp;nbItems,<sp/></highlight><highlight class="stringliteral">&quot;u16&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>*inventaire<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structinventaire__s" kindref="compound">t_inventaire</ref>));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>(*inventaire)-&gt;inventaire<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structinventaire__item__s" kindref="compound">t_inventaire_item</ref>)<sp/>*<sp/>nbItems);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>(*inventaire)-&gt;nbItemMax<sp/>=<sp/>nbItems;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>uint16_t<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>nbItems<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_json_obj(<sp/>obj,<sp/>buffer,<sp/>val,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*val<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_json_obj(obj,<sp/>strcat(buffer,<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">),<sp/>val2,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*inventaire)-&gt;inventaire<sp/>+<sp/>i)-&gt;item<sp/>=<sp/>(tabItem<sp/>+<sp/>*val);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*inventaire)-&gt;inventaire<sp/>+<sp/>i)-&gt;stack<sp/>=<sp/>*val2;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*inventaire)-&gt;inventaire<sp/>+<sp/>i)-&gt;item<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*inventaire)-&gt;inventaire<sp/>+<sp/>i)-&gt;stack<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(enr);</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free_inventaire(<sp/><ref refid="structinventaire__s" kindref="compound">t_inventaire</ref><sp/>*inventaire<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inventaire-&gt;inventaire<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*uint16_t<sp/>i;</highlight></codeline>
<codeline lineno="410"><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>inventaire-&gt;nbItemMax<sp/>;<sp/>i++<sp/><sp/>)</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>(inventaire-&gt;inventaire<sp/>+<sp/>i)-&gt;item<sp/>)</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free((inventaire-&gt;inventaire<sp/>+<sp/>i)-&gt;item);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(inventaire-&gt;inventaire);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inventaire<sp/>)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(inventaire);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>police<sp/>)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(police);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bordure<sp/>)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_DestroyTexture(bordure);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bordureSelectionne<sp/>)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_DestroyTexture(bordureSelectionne);</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/inventaire.c"/>
  </compounddef>
</doxygen>
