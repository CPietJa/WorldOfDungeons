<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structure__block_8c" kind="file" language="C++">
    <compoundname>structure_block.c</compoundname>
    <includes refid="biome_8h" local="no">biome.h</includes>
    <includes refid="block_8h" local="no">block.h</includes>
    <includes refid="commun_8h" local="no">commun.h</includes>
    <includes refid="generation_8h" local="no">generation.h</includes>
    <includes refid="perlin_8h" local="no">perlin.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="structure__block_8h" local="no">structure_block.h</includes>
    <incdepgraph>
      <node id="447">
        <label>structure_block.h</label>
        <link refid="structure__block_8h"/>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
      </node>
      <node id="442">
        <label>generation.h</label>
        <link refid="generation_8h"/>
        <childnode refid="437" relation="include">
        </childnode>
      </node>
      <node id="436">
        <label>commun.h</label>
        <link refid="commun_8h_source"/>
      </node>
      <node id="434">
        <label>src/structure_block.c</label>
        <link refid="structure__block_8c"/>
        <childnode refid="435" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="443" relation="include">
        </childnode>
        <childnode refid="444" relation="include">
        </childnode>
        <childnode refid="445" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
      </node>
      <node id="445">
        <label>stdlib.h</label>
      </node>
      <node id="435">
        <label>biome.h</label>
        <link refid="biome_8h"/>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="441" relation="include">
        </childnode>
      </node>
      <node id="441">
        <label>liste.h</label>
        <link refid="liste_8h"/>
        <childnode refid="440" relation="include">
        </childnode>
      </node>
      <node id="438">
        <label>couleurs.h</label>
        <link refid="couleurs_8h_source"/>
      </node>
      <node id="439">
        <label>SDL2/SDL.h</label>
      </node>
      <node id="446">
        <label>string.h</label>
      </node>
      <node id="440">
        <label>erreur.h</label>
        <link refid="erreur_8h"/>
      </node>
      <node id="444">
        <label>stdio.h</label>
      </node>
      <node id="443">
        <label>perlin.h</label>
        <link refid="perlin_8h"/>
      </node>
      <node id="437">
        <label>block.h</label>
        <link refid="block_8h"/>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="440" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="structure__block_8c_1ae7d734d808a48c03431e893d3afb3cca" prot="public" static="no" mutable="no">
        <type><ref refid="structt__struct__block" kindref="compound">t_struct_block</ref></type>
        <definition>t_struct_block struct_block[NB_STRUCT_BLOCK]</definition>
        <argsstring>[NB_STRUCT_BLOCK]</argsstring>
        <name>struct_block</name>
        <initializer>= {{ARBRE_TAIGA, 7, &quot;structure/arbre_taiga&quot;, 30, TAIGA},
                                                {ARBRE_FORET, 7, &quot;structure/arbre_foret&quot;, 80, FORET},
                                                {GRAND_ARBRE_FORET, 7, &quot;structure/arbre_foret2&quot;, 10, FORET},
                                                {BUISSON, 5, &quot;structure/buisson&quot;, 60, FORET},
                                                {CACTUS, 3, &quot;structure/cactus&quot;, 30, DESERTS}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/structure_block.c" line="18" column="1" bodyfile="src/structure_block.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="structure__block_8c_1a26e9f11667a1d6426b42e37383880457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int STRUCT_GetWidth</definition>
        <argsstring>(t_struct_block *struct_block, t_struct_block_type type)</argsstring>
        <name>STRUCT_GetWidth</name>
        <param>
          <type><ref refid="structt__struct__block" kindref="compound">t_struct_block</ref> *</type>
          <declname>struct_block</declname>
        </param>
        <param>
          <type>t_struct_block_type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/structure_block.c" line="24" column="1" bodyfile="src/structure_block.c" bodystart="24" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="structure__block_8c_1a2b7c53336e2449c2a04a134b365211c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* STRUCT_GetPath</definition>
        <argsstring>(t_struct_block *struct_block, t_struct_block_type type)</argsstring>
        <name>STRUCT_GetPath</name>
        <param>
          <type><ref refid="structt__struct__block" kindref="compound">t_struct_block</ref> *</type>
          <declname>struct_block</declname>
        </param>
        <param>
          <type>t_struct_block_type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/structure_block.c" line="32" column="1" bodyfile="src/structure_block.c" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="structure__block_8c_1aae2b563d93d982fa2f50c8497ef7abc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int STRUCT_CanSpawn</definition>
        <argsstring>(int x, int i)</argsstring>
        <name>STRUCT_CanSpawn</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/structure_block.c" line="40" column="1" bodyfile="src/structure_block.c" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="structure__block_8c_1ac9510e7b192d204235e27cfd896b91ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void STRUCT_generation</definition>
        <argsstring>(int x, int y, int dir, t_block map[MAX])</argsstring>
        <name>STRUCT_generation</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="structblock__s" kindref="compound">t_block</ref></type>
          <declname>map</declname>
          <array>[MAX]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/structure_block.c" line="49" column="1" bodyfile="src/structure_block.c" bodystart="49" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Module de gestion des structure_block. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>{Maxence.D} </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>13 mars 2019 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="biome_8h" kindref="compound">biome.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="block_8h" kindref="compound">block.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;commun.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="generation_8h" kindref="compound">generation.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="perlin_8h" kindref="compound">perlin.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="structure__block_8h" kindref="compound">structure_block.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="structt__struct__block" kindref="compound">t_struct_block</ref><sp/>struct_block[NB_STRUCT_BLOCK]<sp/>=<sp/>{{ARBRE_TAIGA,<sp/>7,<sp/></highlight><highlight class="stringliteral">&quot;structure/arbre_taiga&quot;</highlight><highlight class="normal">,<sp/>30,<sp/>TAIGA},</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{ARBRE_FORET,<sp/>7,<sp/></highlight><highlight class="stringliteral">&quot;structure/arbre_foret&quot;</highlight><highlight class="normal">,<sp/>80,<sp/>FORET},</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{GRAND_ARBRE_FORET,<sp/>7,<sp/></highlight><highlight class="stringliteral">&quot;structure/arbre_foret2&quot;</highlight><highlight class="normal">,<sp/>10,<sp/>FORET},</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{BUISSON,<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;structure/buisson&quot;</highlight><highlight class="normal">,<sp/>60,<sp/>FORET},</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{CACTUS,<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;structure/cactus&quot;</highlight><highlight class="normal">,<sp/>30,<sp/>DESERTS}};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>STRUCT_GetWidth(<ref refid="structt__struct__block" kindref="compound">t_struct_block</ref><sp/>*struct_block,<sp/>t_struct_block_type<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NB_STRUCT_BLOCK;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(struct_block[i].type<sp/>==<sp/>type)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>struct_block[i].largeur;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*STRUCT_GetPath(<ref refid="structt__struct__block" kindref="compound">t_struct_block</ref><sp/>*struct_block,<sp/>t_struct_block_type<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NB_STRUCT_BLOCK;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(struct_block[i].type<sp/>==<sp/>type)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>struct_block[i].path;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>STRUCT_CanSpawn(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>STRUCT_generation(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir,<sp/><ref refid="structblock__s" kindref="compound">t_block</ref><sp/>map[MAX])<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>y++;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>struct_spawn<sp/>=<sp/>0,<sp/>new_struct<sp/>=<sp/>0,<sp/>struct_spawn_dir1,<sp/>struct_spawn_dir2,<sp/>new_struct_dir1,<sp/>new_struct_dir2;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>t_struct_block_type<sp/>type_spawn;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>t_struct_block_type<sp/>type_can_spawn[NB_STRUCT_BLOCK];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_dir;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_can_spawn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>struct_random<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_dir<sp/>!=<sp/>dir)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>struct_spawn_dir1<sp/>^=<sp/>struct_spawn<sp/>^=<sp/>struct_spawn_dir1<sp/>^=<sp/>struct_spawn;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>new_struct_dir1<sp/>^=<sp/>new_struct<sp/>^=<sp/>new_struct_dir1<sp/>^=<sp/>new_struct;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>last_dir<sp/>=<sp/>dir;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(struct_spawn)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Permet<sp/>de<sp/>prendre<sp/>la<sp/>ligne<sp/>du<sp/>block<sp/>a<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[50];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*file<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>fopen(STRUCT_GetPath(struct_block,<sp/>type_spawn),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>struct_spawn;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>50;<sp/>l++)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line[l]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fgets(line,<sp/>50,<sp/>file);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>strlen(line)<sp/>&amp;&amp;<sp/>(j<sp/>+<sp/>y<sp/>&lt;<sp/>MAX<sp/>-<sp/>1);<sp/>j++)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map[y<sp/>+<sp/>j].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>line[j]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>struct_spawn--;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!struct_spawn<sp/>&amp;&amp;<sp/>new_struct<sp/>&gt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//Attente<sp/>avant<sp/>une<sp/>nouvelle<sp/>ligne</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>new_struct--;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NB_STRUCT_BLOCK;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb_can_spawn<sp/>&lt;<sp/>NB_STRUCT_BLOCK<sp/>&amp;&amp;<sp/>!new_struct<sp/>&amp;&amp;<sp/>struct_block[i].biome<sp/>==<sp/>biome)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_can_spawn[nb_can_spawn]<sp/>=<sp/>struct_block[i].type;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nb_can_spawn++;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!struct_spawn<sp/>&amp;&amp;<sp/>!new_struct<sp/>&amp;&amp;<sp/>nb_can_spawn<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>new_struct<sp/>=<sp/>(int)((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)x<sp/>*<sp/><ref refid="perlin_8h_1a2af0d3d29624c62a028497de1bdadcbe" kindref="member">perlin2d</ref>(x,<sp/>MAX,<sp/>FREQ,<sp/>DEPTH)<sp/>*<sp/>(double)W_BIOME<sp/>+<sp/>1)<sp/>%<sp/>DIST_MAX_STRUCT;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>struct_random<sp/>=<sp/>(int)((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)x<sp/>*<sp/><ref refid="perlin_8h_1a2af0d3d29624c62a028497de1bdadcbe" kindref="member">perlin2d</ref>(x,<sp/>MAX,<sp/>FREQ,<sp/>DEPTH)<sp/>*<sp/>(double)W_BIOME<sp/>+<sp/>1)<sp/>%<sp/>nb_can_spawn;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>type_spawn<sp/>=<sp/>type_can_spawn[struct_random];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>struct_spawn<sp/>=<sp/>STRUCT_GetWidth(struct_block,<sp/>type_spawn);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/structure_block.c"/>
  </compounddef>
</doxygen>
